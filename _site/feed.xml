

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>jimin's blog</title>
  <subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle>
  <updated>2022-11-27T21:40:26+08:00</updated>
  <author>
    <name>송지민</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2022 송지민 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>섹션6. 스프링DB 접근 기술</title>
    <link href="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81DB%EC%A0%91%EA%B7%BC%EA%B8%B0%EC%88%A0/" rel="alternate" type="text/html" title="섹션6. 스프링DB 접근 기술" />
    <published>2022-11-26T23:00:06+08:00</published>
  
    <updated>2022-11-27T21:37:45+08:00</updated>
  
    <id>http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81DB%EC%A0%91%EA%B7%BC%EA%B8%B0%EC%88%A0/</id>
    <content src="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81DB%EC%A0%91%EA%B7%BC%EA%B8%B0%EC%88%A0/" />
    <author>
      <name>jimin</name>
    </author>

  
    
    <category term="강의" />
    
    <category term="스프링입문" />
    
  

  
    <summary>
      





      H2 데이터베이스


  용량이 낮고 가벼움 &amp;amp; 웹으로 DB를 보여줌 → 교육용으로 좋은 DB
  버전은 1.4.200
  실행 명령 : ./h2.sh
  실행하고 DB파일 생성시 파일이름.mv.db 파일이 생김


데이터베이스 접속 설정


  build.gradle에 jdbc, h2 관련 라이브러리를 추가


implementation 'org.springframework.boot:spring-boot-starter-jdbc'
runtimeOnly 'com.h2database:h2'



  
    application.properties에 DB 접속정보 작성

      spring.datasource.url=jdbc:h2:tcp://localhost/~/test
  spring.data...
    </summary>
  

  </entry>

  
  <entry>
    <title>섹션5. 회원 관리 예제 - 웹 MVC 개발</title>
    <link href="http://localhost:4000/posts/%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%98%88%EC%A0%9C%EC%9B%B9MVC%EA%B0%9C%EB%B0%9C/" rel="alternate" type="text/html" title="섹션5. 회원 관리 예제 - 웹 MVC 개발" />
    <published>2022-11-26T23:00:05+08:00</published>
  
    <updated>2022-11-27T21:01:43+08:00</updated>
  
    <id>http://localhost:4000/posts/%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%98%88%EC%A0%9C%EC%9B%B9MVC%EA%B0%9C%EB%B0%9C/</id>
    <content src="http://localhost:4000/posts/%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%98%88%EC%A0%9C%EC%9B%B9MVC%EA%B0%9C%EB%B0%9C/" />
    <author>
      <name>jimin</name>
    </author>

  
    
    <category term="강의" />
    
    <category term="스프링입문" />
    
  

  
    <summary>
      





      내용

  그냥 코드 따라치는거라 정리할게 없음


    </summary>
  

  </entry>

  
  <entry>
    <title>섹션4. 스프링 빈과 의존관계</title>
    <link href="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B9%88%EA%B3%BC%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84/" rel="alternate" type="text/html" title="섹션4. 스프링 빈과 의존관계" />
    <published>2022-11-26T23:00:04+08:00</published>
  
    <updated>2022-11-27T21:01:43+08:00</updated>
  
    <id>http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B9%88%EA%B3%BC%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84/</id>
    <content src="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B9%88%EA%B3%BC%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84/" />
    <author>
      <name>jimin</name>
    </author>

  
    
    <category term="강의" />
    
    <category term="스프링입문" />
    
  

  
    <summary>
      





      Controller


  Controller는 Service를 통해서 데이터를 조회해야함
  이런 관계를 의존관계가 있다 라고함




스프링 컨테이너 &amp;amp; 스프링 빈


  스프링 컨테이너
    
      스프링 빈의 생명주기를 관리하며, 생성된 스프링 빈들에게 추가적인 기능을 제공하는 역할
      일반적으로는 new 생성자, 인터페이스 호출, 팩토리 호출 방식으로 객체를 생성하고 소멸
      스프링 컨테이너는 위의 역할을 대신해준다 → 제어 흐름을 외부에서 관리하게 된다.
      객체들 간의 의존 관계를 런타임 과정에서 자동으로 만들어준다.
    
  





  스프링 빈
    
      스프링 컨테이너에 의해 관리되는 자바 객체를 의미
      스프링 빈을 등록하는...
    </summary>
  

  </entry>

  
  <entry>
    <title>섹션3. 회원 관리 예제 - 백엔드 개발</title>
    <link href="http://localhost:4000/posts/%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%98%88%EC%A0%9C%EB%B0%B1%EC%97%94%EB%93%9C%EA%B0%9C%EB%B0%9C/" rel="alternate" type="text/html" title="섹션3. 회원 관리 예제 - 백엔드 개발" />
    <published>2022-11-26T23:00:03+08:00</published>
  
    <updated>2022-11-27T21:01:43+08:00</updated>
  
    <id>http://localhost:4000/posts/%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%98%88%EC%A0%9C%EB%B0%B1%EC%97%94%EB%93%9C%EA%B0%9C%EB%B0%9C/</id>
    <content src="http://localhost:4000/posts/%ED%9A%8C%EC%9B%90%EA%B4%80%EB%A6%AC%EC%98%88%EC%A0%9C%EB%B0%B1%EC%97%94%EB%93%9C%EA%B0%9C%EB%B0%9C/" />
    <author>
      <name>jimin</name>
    </author>

  
    
    <category term="강의" />
    
    <category term="스프링입문" />
    
  

  
    <summary>
      





      섹션2. 스프링 웹 개발 기초

정적 컨탠츠(Static Content)


  resources 아래 static 폴더에 html 파일을 생성하면 정적 html 페이지를 반환




MVC와 템플릿


  MVC = Model, View, Controller
  View → 화면을 그려주기만 하는 것
  역할을 분명히 나눠 유지보수를 원할하게 하기 위함




API


  MVC와 다르게 클라이언트가 요청한 값을 문자열 또는 객체로 반환하는 것




어노테이션


  @RequestParam(”파라미터”) → get방식에서 사용하는 것, 주소에서 ?뒤에 오는 “파라미터”의 값을 사용할 수 있게 해준다.
  @ResponseBody → 서버에서 클라이언트로 데이터를 보낼때 해당 어노테이션을 사용한다...
    </summary>
  

  </entry>

  
  <entry>
    <title>섹션2. 스프링 웹 개발 기초</title>
    <link href="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9B%B9%EA%B0%9C%EB%B0%9C%EA%B8%B0%EC%B4%88/" rel="alternate" type="text/html" title="섹션2. 스프링 웹 개발 기초" />
    <published>2022-11-26T23:00:02+08:00</published>
  
    <updated>2022-11-27T21:01:43+08:00</updated>
  
    <id>http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9B%B9%EA%B0%9C%EB%B0%9C%EA%B8%B0%EC%B4%88/</id>
    <content src="http://localhost:4000/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EC%9B%B9%EA%B0%9C%EB%B0%9C%EA%B8%B0%EC%B4%88/" />
    <author>
      <name>jimin</name>
    </author>

  
    
    <category term="강의" />
    
    <category term="스프링입문" />
    
  

  
    <summary>
      





      웹 애플리케이션 계층 구조




  컨트롤러: 웹 MVC의 컨트롤러 역할
  서비스: 핵심 비즈니스 로직 구현
  리포지토리: 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리
  도메인: 비즈니스 도메인 객체, 예) 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨


클래스 의존관계




  MemberService → Member의 서비스 → 멤버 관련 비즈니스 로직 구현
  MemberRepository → interface로 설계 → 나중에 변경될 수 있기 때문
  MemoryMemberRepository → MemberRepository의 구현체
  개발을 진행하기 위해서 초기 개발 단계에서는 구현체로 가벼운 메모리 기반의 데이터 저장소 사용


테스트 작성


  테스...
    </summary>
  

  </entry>

</feed>


